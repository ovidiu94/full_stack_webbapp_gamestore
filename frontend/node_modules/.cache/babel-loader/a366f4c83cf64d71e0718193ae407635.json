{"ast":null,"code":"import axios from \"axios\";\nexport const getAllGames = () => async dispatch => {\n  dispatch({\n    type: \"GET_GAMES_REQUEST\"\n  });\n\n  try {\n    const response = await axios.get(\"/api/games/getallgames\");\n    console.log(response);\n    dispatch({\n      type: \"GET_GAMES_SUCCESS\",\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: \"GET_GAMES_FAILED\",\n      payload: error\n    });\n  }\n};\nexport const getGameById = gameid => async dispatch => {\n  dispatch({\n    type: \"GET_GAMEBYID_REQUEST\"\n  });\n\n  try {\n    const response = await axios.post(\"/api/games/getgamebyid\", {\n      gameid\n    });\n    console.log(response);\n    dispatch({\n      type: \"GET_GAMEBYID_SUCCESS\",\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: \"GET_GAMEBYID_FAILED\",\n      payload: error\n    });\n  }\n};\nexport const filterGames = (searchkey, category) => async dispatch => {\n  dispatch({\n    type: \"GET_GAMES_REQUEST\"\n  });\n\n  try {\n    var filteredGames;\n    const response = await axios.get(\"/api/games/getallgames\");\n    filteredGames = response.data.filter(game => game.name.toLowerCase().includes(searchkey));\n\n    if (category != \"all\") {\n      filteredGames = response.data.filter(game => game.category.toLowerCase() == category);\n    }\n\n    dispatch({\n      type: \"GET_GAMES_SUCCESS\",\n      payload: filteredGames\n    });\n  } catch (error) {\n    dispatch({\n      type: \"GET_GAMES_FAILED\",\n      payload: error\n    });\n  }\n};\nexport const addGame = game => async dispatch => {\n  dispatch({\n    type: \"ADD_GAME_REQUEST\"\n  });\n\n  try {\n    const response = await axios.post(\"/api/games/addgame\", {\n      game\n    });\n    console.log(response);\n    dispatch({\n      type: \"ADD_GAME_SUCCESS\"\n    });\n  } catch (error) {\n    dispatch({\n      type: \"ADD_GAME_FAILED\",\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["D:/GameStore/frontend/src/actions/gameActions.js"],"names":["axios","getAllGames","dispatch","type","response","get","console","log","payload","data","error","getGameById","gameid","post","filterGames","searchkey","category","filteredGames","filter","game","name","toLowerCase","includes","addGame"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const getAllGames = () => async (dispatch) => {\r\n  dispatch({ type: \"GET_GAMES_REQUEST\" });\r\n\r\n  try {\r\n    const response = await axios.get(\"/api/games/getallgames\");\r\n    console.log(response);\r\n    dispatch({ type: \"GET_GAMES_SUCCESS\", payload: response.data });\r\n  } catch (error) {\r\n    dispatch({ type: \"GET_GAMES_FAILED\", payload: error });\r\n  }\r\n};\r\n\r\nexport const getGameById = (gameid) => async (dispatch) => {\r\n  dispatch({ type: \"GET_GAMEBYID_REQUEST\" });\r\n\r\n  try {\r\n    const response = await axios.post(\"/api/games/getgamebyid\", {gameid});\r\n    console.log(response);\r\n    dispatch({ type: \"GET_GAMEBYID_SUCCESS\", payload: response.data });\r\n  } catch (error) {\r\n    dispatch({ type: \"GET_GAMEBYID_FAILED\", payload: error });\r\n  }\r\n};\r\n\r\nexport const filterGames = (searchkey, category) => async (dispatch) => {\r\n  dispatch({ type: \"GET_GAMES_REQUEST\" });\r\n\r\n  try {\r\n    var filteredGames;\r\n    const response = await axios.get(\"/api/games/getallgames\");\r\n    filteredGames = response.data.filter((game) =>\r\n      game.name.toLowerCase().includes(searchkey)\r\n    );\r\n    if (category != \"all\") {\r\n      filteredGames = response.data.filter(\r\n        (game) => game.category.toLowerCase() == category\r\n      );\r\n    }\r\n    dispatch({ type: \"GET_GAMES_SUCCESS\", payload: filteredGames });\r\n  } catch (error) {\r\n    dispatch({ type: \"GET_GAMES_FAILED\", payload: error });\r\n  }\r\n};\r\n\r\nexport const addGame = (game) => async (dispatch) => {\r\n  dispatch({ type: \"ADD_GAME_REQUEST\" });\r\n  try {\r\n    const response = await axios.post(\"/api/games/addgame\", { game });\r\n    console.log(response);\r\n    dispatch({ type: \"ADD_GAME_SUCCESS\" });\r\n  } catch (error) {\r\n    dispatch({ type: \"ADD_GAME_FAILED\", payload: error });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}